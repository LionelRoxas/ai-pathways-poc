generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Models

// User profiling data
model UserProfile {
  id              String   @id @default(cuid())
  sessionId       String   @unique @map("session_id")
  educationLevel  String?  @map("education_level") // 'high_school', 'some_college', 'bachelors', etc.
  gradeLevel      Int?     @map("grade_level") // 9, 10, 11, 12
  interests       String[] // Array of interests/career areas
  careerGoals     String[] @map("career_goals") // Specific career interests
  location        String?  @default("Hawaii") // Island preference
  timeline        String?  // 'immediate', '1_year', '2_years', etc.
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  conversations   Conversation[]
  interactions    UserInteraction[]

  @@map("user_profiles")
}

// University of Hawaii Programs
model UHProgram {
  id                String   @id @default(cuid())
  campus            String   // 'UH Manoa', 'UH Hilo', 'Hawaii CC', etc.
  program           String   // Program code/identifier
  degree            String   // 'BA', 'BS', 'AS', 'Certificate', etc.
  concentration     String?  // Optional concentration/specialization
  programName       String   @map("program_name") // Full program name
  cipCode           String?  @map("cip_code") // Classification of Instructional Programs code
  cipCategory       String?  @map("cip_category") // 2-digit CIP category
  
  // Additional metadata we can enrich
  description       String?
  requiredCredits   Int?     @map("required_credits")
  estimatedDuration String?  @map("estimated_duration") // '2 years', '4 years', etc.
  deliveryMode      String[] @map("delivery_mode") // ['in_person', 'online', 'hybrid']
  admissionRequirements String[] @map("admission_requirements")
  careerOutcomes    String[] @map("career_outcomes") // Potential careers
  
  // Search and relevance fields
  searchKeywords    String[] @map("search_keywords") // For better matching
  relevanceScore    Float    @default(0) @map("relevance_score") // For ranking
  
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  doePathways       DOEProgramPathway[]

  @@index([campus])
  @@index([degree])
  @@index([cipCategory])
  @@index([programName])
  @@map("uh_programs")
}

// Department of Education Programs of Study
model DOEProgram {
  id                String   @id @default(cuid())
  programOfStudy    String   @unique @map("program_of_study") // Name of the pathway
  
  // Course requirements by grade
  grade9Courses     String[] @map("grade_9_courses")
  grade10Courses    String[] @map("grade_10_courses")
  grade11Courses    String[] @map("grade_11_courses")
  grade12Courses    String[] @map("grade_12_courses")
  electiveCourses   String[] @map("elective_courses")
  gradRequirements  String[] @map("grad_requirements")
  
  // Career and industry information
  careerCluster     String?  @map("career_cluster") // e.g., 'STEM', 'Health', 'Business'
  industryPartners  String[] @map("industry_partners")
  certifications    String[] // Industry certifications available
  
  // Search and relevance
  searchKeywords    String[] @map("search_keywords")
  relevanceScore    Float    @default(0) @map("relevance_score")
  
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  uhPathways        DOEProgramPathway[]

  @@index([programOfStudy])
  @@index([careerCluster])
  @@map("doe_programs")
}

// Bridge table connecting DOE programs to UH programs
model DOEProgramPathway {
  id              String     @id @default(cuid())
  doeProgramId    String     @map("doe_program_id")
  uhProgramId     String     @map("uh_program_id")
  campus          String     // Quick reference to campus
  pathwayType     String?    @map("pathway_type") // 'direct', 'recommended', 'alternative'
  notes           String?
  
  // Relations
  doeProgram      DOEProgram @relation(fields: [doeProgramId], references: [id], onDelete: Cascade)
  uhProgram       UHProgram  @relation(fields: [uhProgramId], references: [id], onDelete: Cascade)

  @@unique([doeProgramId, uhProgramId])
  @@index([campus])
  @@map("doe_program_pathways")
}

// Conversation tracking
model Conversation {
  id                  String      @id @default(cuid())
  userProfileId       String      @map("user_profile_id")
  sessionId           String      @map("session_id")
  messages            Json        // Array of message objects
  extractedProfile    Json?       @map("extracted_profile") // AI-extracted user context
  currentContext      Json?       @map("current_context")
  conversationStatus  String      @default("active") @map("conversation_status")
  lastActivity        DateTime    @default(now()) @map("last_activity")
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")

  // Relations
  userProfile         UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@unique([sessionId])
  @@index([userProfileId])
  @@map("conversations")
}

// User interaction tracking
model UserInteraction {
  id                 String      @id @default(cuid())
  userProfileId      String      @map("user_profile_id")
  interactionType    String      @map("interaction_type") // 'search', 'view_program', 'pathway_explore'
  searchQuery        String?     @map("search_query")
  viewedPrograms     String[]    @map("viewed_programs") // UH program IDs
  viewedPathways     String[]    @map("viewed_pathways") // DOE program IDs
  responseData       Json?       @map("response_data") // What was shown to user
  userFeedback       Int?        @map("user_feedback") // 1-5 rating
  createdAt          DateTime    @default(now()) @map("created_at")

  // Relations
  userProfile        UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@index([userProfileId])
  @@index([interactionType])
  @@map("user_interactions")
}

// Feedback survey
model Survey {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  feedback  String?  // optional text feedback
  sessionId String?  @map("session_id")
  createdAt DateTime @default(now())
  
  @@map("surveys")
}